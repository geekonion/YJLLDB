# -*- coding: UTF-8 -*-

import lldb
import optparse
import shlex
import os
import util


def __lldb_init_module(debugger, internal_dict):
    debugger.HandleCommand(
        'command script add -h "add command line tool" -f '
        'ShellCMD.add_command_line_tool addcmd')

    debugger.HandleCommand(
        'command script add -h "delete command added by addcmd" -f '
        'ShellCMD.delete_command_line_tool delcmd')


def add_command_line_tool(debugger, command, result, internal_dict):
    """
    add command line tool
    implemented in YJLLDB/src/ShellCMD.py
    """
    # 去掉转义符
    command = command.replace('\\', '\\\\')
    # posix=False特殊符号处理相关，确保能够正确解析参数，因为OC方法前有-
    command_args = shlex.split(command, posix=False)
    # 创建parser
    parser = generate_option_parser('addcmd')
    # 解析参数，捕获异常
    try:
        # options是所有的选项，key-value形式，args是其余剩余所有参数，不包含options
        (options, args) = parser.parse_args(command_args)
    except Exception as error:
        print(error)
        result.SetError("\n" + parser.get_usage())
        return

    nargs = len(args)
    if nargs < 1 or nargs > 2:
        result.SetError("\n" + parser.get_usage())
        return

    template = """\
# -*- coding: UTF-8 -*-

import lldb
import util


def __lldb_init_module(debugger, internal_dict):
    debugger.HandleCommand(
        'command script add -h "{help_info}" -f '
        '{cmd}.handle_{cmd} {cmd}')


def handle_{cmd}(debugger, command, result, internal_dict):
    \"\"\"
    {help_info}
    implemented in YJLLDB/autoGenerated/{cmd}.py
    \"\"\"
    code, out, err = util.exe_shell_command('{cmd} ' + command)
    if err or code != 0:
        print(err)

    if out:
        print(out)
    """
    cmd_name = args[0]
    if nargs == 2:
        help_info = args[1].replace("'", "")
        help_info = help_info.replace('"', '')
    else:
        help_info = ''

    script = template.format(cmd=cmd_name, help_info=help_info)

    script_path = os.path.join(get_dir_auto_generated(), cmd_name + '.py')
    with open(script_path, "w+") as file:
        file.write(script)
        file.close()

    import_cmd = 'command script import {}'.format(script_path)
    util.exe_command(import_cmd)

    print('Add command script successfully, try using it')


def delete_command_line_tool(debugger, command, result, internal_dict):
    """
    delete command added by addcmd
    implemented in YJLLDB/src/ShellCMD.py
    """
    # 去掉转义符
    command = command.replace('\\', '\\\\')
    # posix=False特殊符号处理相关，确保能够正确解析参数，因为OC方法前有-
    command_args = shlex.split(command, posix=False)
    # 创建parser
    parser = generate_option_parser('delcmd')
    # 解析参数，捕获异常
    try:
        # options是所有的选项，key-value形式，args是其余剩余所有参数，不包含options
        (options, args) = parser.parse_args(command_args)
    except Exception as error:
        print(error)
        result.SetError("\n" + parser.get_usage())
        return

    if len(args) != 1:
        result.SetError("\n" + parser.get_usage())
        return

    cmd_name = args[0]
    script_path = os.path.join(get_dir_auto_generated(), cmd_name + '.py')
    if not os.path.exists(script_path):
        print('command "{}" not found'.format(cmd_name))
        return

    import_cmd = 'command script delete {}'.format(cmd_name)
    util.exe_command(import_cmd)
    os.remove(script_path)

    print('command "{}" has been deleted'.format(cmd_name))


def get_dir_auto_generated():
    file_path = os.path.realpath(__file__)
    dir_src = os.path.dirname(file_path)
    dir_auto_generated = os.path.join(os.path.dirname(dir_src), 'autoGenerated')

    return dir_auto_generated


def generate_option_parser(prog):
    usage = "usage: %prog [cmd name]\n"

    parser = optparse.OptionParser(usage=usage, prog=prog)

    return parser
